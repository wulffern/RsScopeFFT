//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace NextGenLab.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    internal class NglXml1 : DataSet {
        
        private ResultsDataTable tableResults;
        
        private YValsDataTable tableYVals;
        
        private PlotsDataTable tablePlots;
        
        private DataRelation relationPlotYVals;
        
        private DataRelation relationResultPlot;
        
        public NglXml1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected NglXml1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Result"] != null)) {
                    this.Tables.Add(new ResultsDataTable(ds.Tables["Result"]));
                }
                if ((ds.Tables["YVals"] != null)) {
                    this.Tables.Add(new YValsDataTable(ds.Tables["YVals"]));
                }
                if ((ds.Tables["Plot"] != null)) {
                    this.Tables.Add(new PlotsDataTable(ds.Tables["Plot"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ResultsDataTable Results {
            get {
                return this.tableResults;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public YValsDataTable YVals {
            get {
                return this.tableYVals;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PlotsDataTable Plots {
            get {
                return this.tablePlots;
            }
        }
        
        public override DataSet Clone() {
            NglXml1 cln = ((NglXml1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Result"] != null)) {
                this.Tables.Add(new ResultsDataTable(ds.Tables["Result"]));
            }
            if ((ds.Tables["YVals"] != null)) {
                this.Tables.Add(new YValsDataTable(ds.Tables["YVals"]));
            }
            if ((ds.Tables["Plot"] != null)) {
                this.Tables.Add(new PlotsDataTable(ds.Tables["Plot"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableResults = ((ResultsDataTable)(this.Tables["Result"]));
            if ((this.tableResults != null)) {
                this.tableResults.InitVars();
            }
            this.tableYVals = ((YValsDataTable)(this.Tables["YVals"]));
            if ((this.tableYVals != null)) {
                this.tableYVals.InitVars();
            }
            this.tablePlots = ((PlotsDataTable)(this.Tables["Plot"]));
            if ((this.tablePlots != null)) {
                this.tablePlots.InitVars();
            }
            this.relationPlotYVals = this.Relations["PlotYVals"];
            this.relationResultPlot = this.Relations["ResultPlot"];
        }
        
        private void InitClass() {
            this.DataSetName = "NglXml1";
            this.Prefix = "";
            this.Namespace = "http://ngl.fysel.ntnu.no/NglXml1.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableResults = new ResultsDataTable();
            this.Tables.Add(this.tableResults);
            this.tableYVals = new YValsDataTable();
            this.Tables.Add(this.tableYVals);
            this.tablePlots = new PlotsDataTable();
            this.Tables.Add(this.tablePlots);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("PlotYVals", new DataColumn[] {
                        this.tablePlots.PIDColumn}, new DataColumn[] {
                        this.tableYVals.PIDColumn});
            this.tableYVals.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ResultPlot", new DataColumn[] {
                        this.tableResults.RIDColumn}, new DataColumn[] {
                        this.tablePlots.RIDColumn});
            this.tablePlots.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationPlotYVals = new DataRelation("PlotYVals", new DataColumn[] {
                        this.tablePlots.PIDColumn}, new DataColumn[] {
                        this.tableYVals.PIDColumn}, false);
            this.Relations.Add(this.relationPlotYVals);
            this.relationResultPlot = new DataRelation("ResultPlot", new DataColumn[] {
                        this.tableResults.RIDColumn}, new DataColumn[] {
                        this.tablePlots.RIDColumn}, false);
            this.Relations.Add(this.relationResultPlot);
        }
        
        private bool ShouldSerializeResults() {
            return false;
        }
        
        private bool ShouldSerializeYVals() {
            return false;
        }
        
        private bool ShouldSerializePlots() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        internal delegate void ResultChangeEventHandler(object sender, ResultChangeEvent e);
        
        internal delegate void YValChangeEventHandler(object sender, YValChangeEvent e);
        
        internal delegate void PlotChangeEventHandler(object sender, PlotChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        internal class ResultsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTime;
            
            private DataColumn columnDescription;
            
            private DataColumn columnRID;
            
            private DataColumn columnGraphType;
            
            internal ResultsDataTable() : 
                    base("Result") {
                this.InitClass();
            }
            
            internal ResultsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TimeColumn {
                get {
                    return this.columnTime;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn RIDColumn {
                get {
                    return this.columnRID;
                }
            }
            
            internal DataColumn GraphTypeColumn {
                get {
                    return this.columnGraphType;
                }
            }
            
            public Result this[int index] {
                get {
                    return ((Result)(this.Rows[index]));
                }
            }
            
            public event ResultChangeEventHandler ResultChanged;
            
            public event ResultChangeEventHandler ResultChanging;
            
            public event ResultChangeEventHandler ResultDeleted;
            
            public event ResultChangeEventHandler ResultDeleting;
            
            public void AddResult(Result row) {
                this.Rows.Add(row);
            }
            
            public Result AddResult(string Time, string Description, string GraphType) {
                Result rowResult = ((Result)(this.NewRow()));
                rowResult.ItemArray = new object[] {
                        Time,
                        Description,
                        null,
                        GraphType};
                this.Rows.Add(rowResult);
                return rowResult;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ResultsDataTable cln = ((ResultsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ResultsDataTable();
            }
            
            internal void InitVars() {
                this.columnTime = this.Columns["Time"];
                this.columnDescription = this.Columns["Description"];
                this.columnRID = this.Columns["RID"];
                this.columnGraphType = this.Columns["GraphType"];
            }
            
            private void InitClass() {
                this.columnTime = new DataColumn("Time", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTime);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDescription);
                this.columnRID = new DataColumn("RID", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRID);
                this.columnGraphType = new DataColumn("GraphType", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnGraphType);
                this.Constraints.Add(new UniqueConstraint("NglXml1Key2", new DataColumn[] {
                                this.columnRID}, false));
                this.columnTime.Namespace = "http://ngl.fysel.ntnu.no/NglXml1.xsd";
                this.columnDescription.Namespace = "http://ngl.fysel.ntnu.no/NglXml1.xsd";
                this.columnRID.AutoIncrement = true;
                this.columnRID.AllowDBNull = false;
                this.columnRID.Unique = true;
                this.columnRID.Namespace = "http://ngl.fysel.ntnu.no/NglXml1.xsd";
                this.columnGraphType.Namespace = "http://ngl.fysel.ntnu.no/NglXml1.xsd";
            }
            
            public Result NewResult() {
                return ((Result)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Result(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Result);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ResultChanged != null)) {
                    this.ResultChanged(this, new ResultChangeEvent(((Result)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ResultChanging != null)) {
                    this.ResultChanging(this, new ResultChangeEvent(((Result)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ResultDeleted != null)) {
                    this.ResultDeleted(this, new ResultChangeEvent(((Result)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ResultDeleting != null)) {
                    this.ResultDeleting(this, new ResultChangeEvent(((Result)(e.Row)), e.Action));
                }
            }
            
            public void RemoveResult(Result row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        internal class Result : DataRow {
            
            private ResultsDataTable tableResults;
            
            internal Result(DataRowBuilder rb) : 
                    base(rb) {
                this.tableResults = ((ResultsDataTable)(this.Table));
            }
            
            public string Time {
                get {
                    try {
                        return ((string)(this[this.tableResults.TimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.TimeColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableResults.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.DescriptionColumn] = value;
                }
            }
            
            public int RID {
                get {
                    return ((int)(this[this.tableResults.RIDColumn]));
                }
                set {
                    this[this.tableResults.RIDColumn] = value;
                }
            }
            
            public string GraphType {
                get {
                    try {
                        return ((string)(this[this.tableResults.GraphTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.GraphTypeColumn] = value;
                }
            }
            
            public bool IsTimeNull() {
                return this.IsNull(this.tableResults.TimeColumn);
            }
            
            public void SetTimeNull() {
                this[this.tableResults.TimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableResults.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableResults.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsGraphTypeNull() {
                return this.IsNull(this.tableResults.GraphTypeColumn);
            }
            
            public void SetGraphTypeNull() {
                this[this.tableResults.GraphTypeColumn] = System.Convert.DBNull;
            }
            
            public Plot[] GetPlots() {
                return ((Plot[])(this.GetChildRows(this.Table.ChildRelations["ResultPlot"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        internal class ResultChangeEvent : EventArgs {
            
            private Result eventRow;
            
            private DataRowAction eventAction;
            
            public ResultChangeEvent(Result row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Result Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        internal class YValsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPID;
            
            private DataColumn columnY;
            
            internal YValsDataTable() : 
                    base("YVals") {
                this.InitClass();
            }
            
            internal YValsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PIDColumn {
                get {
                    return this.columnPID;
                }
            }
            
            internal DataColumn YColumn {
                get {
                    return this.columnY;
                }
            }
            
            public YVal this[int index] {
                get {
                    return ((YVal)(this.Rows[index]));
                }
            }
            
            public event YValChangeEventHandler YValChanged;
            
            public event YValChangeEventHandler YValChanging;
            
            public event YValChangeEventHandler YValDeleted;
            
            public event YValChangeEventHandler YValDeleting;
            
            public void AddYVal(YVal row) {
                this.Rows.Add(row);
            }
            
            public YVal AddYVal(Plot parentPlotByPlotYVals, string Y) {
                YVal rowYVal = ((YVal)(this.NewRow()));
                rowYVal.ItemArray = new object[] {
                        parentPlotByPlotYVals[7],
                        Y};
                this.Rows.Add(rowYVal);
                return rowYVal;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                YValsDataTable cln = ((YValsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new YValsDataTable();
            }
            
            internal void InitVars() {
                this.columnPID = this.Columns["PID"];
                this.columnY = this.Columns["Y"];
            }
            
            private void InitClass() {
                this.columnPID = new DataColumn("PID", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPID);
                this.columnY = new DataColumn("Y", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnY);
                this.columnPID.Namespace = "http://ngl.fysel.ntnu.no/NglXml1.xsd";
                this.columnY.AllowDBNull = false;
            }
            
            public YVal NewYVal() {
                return ((YVal)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new YVal(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(YVal);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.YValChanged != null)) {
                    this.YValChanged(this, new YValChangeEvent(((YVal)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.YValChanging != null)) {
                    this.YValChanging(this, new YValChangeEvent(((YVal)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.YValDeleted != null)) {
                    this.YValDeleted(this, new YValChangeEvent(((YVal)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.YValDeleting != null)) {
                    this.YValDeleting(this, new YValChangeEvent(((YVal)(e.Row)), e.Action));
                }
            }
            
            public void RemoveYVal(YVal row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        internal class YVal : DataRow {
            
            private YValsDataTable tableYVals;
            
            internal YVal(DataRowBuilder rb) : 
                    base(rb) {
                this.tableYVals = ((YValsDataTable)(this.Table));
            }
            
            public int PID {
                get {
                    try {
                        return ((int)(this[this.tableYVals.PIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYVals.PIDColumn] = value;
                }
            }
            
            public string Y {
                get {
                    return ((string)(this[this.tableYVals.YColumn]));
                }
                set {
                    this[this.tableYVals.YColumn] = value;
                }
            }
            
            public Plot Plot {
                get {
                    return ((Plot)(this.GetParentRow(this.Table.ParentRelations["PlotYVals"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PlotYVals"]);
                }
            }
            
            public bool IsPIDNull() {
                return this.IsNull(this.tableYVals.PIDColumn);
            }
            
            public void SetPIDNull() {
                this[this.tableYVals.PIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        internal class YValChangeEvent : EventArgs {
            
            private YVal eventRow;
            
            private DataRowAction eventAction;
            
            public YValChangeEvent(YVal row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public YVal Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        internal class PlotsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnXLabel;
            
            private DataColumn columnYLabel;
            
            private DataColumn columnXScale;
            
            private DataColumn columnYScale;
            
            private DataColumn columnXUnit;
            
            private DataColumn columnYUnit;
            
            private DataColumn columnRID;
            
            private DataColumn columnPID;
            
            private DataColumn columnWidth;
            
            private DataColumn columnHeight;
            
            private DataColumn columnX;
            
            internal PlotsDataTable() : 
                    base("Plot") {
                this.InitClass();
            }
            
            internal PlotsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn XLabelColumn {
                get {
                    return this.columnXLabel;
                }
            }
            
            internal DataColumn YLabelColumn {
                get {
                    return this.columnYLabel;
                }
            }
            
            internal DataColumn XScaleColumn {
                get {
                    return this.columnXScale;
                }
            }
            
            internal DataColumn YScaleColumn {
                get {
                    return this.columnYScale;
                }
            }
            
            internal DataColumn XUnitColumn {
                get {
                    return this.columnXUnit;
                }
            }
            
            internal DataColumn YUnitColumn {
                get {
                    return this.columnYUnit;
                }
            }
            
            internal DataColumn RIDColumn {
                get {
                    return this.columnRID;
                }
            }
            
            internal DataColumn PIDColumn {
                get {
                    return this.columnPID;
                }
            }
            
            internal DataColumn WidthColumn {
                get {
                    return this.columnWidth;
                }
            }
            
            internal DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            internal DataColumn XColumn {
                get {
                    return this.columnX;
                }
            }
            
            public Plot this[int index] {
                get {
                    return ((Plot)(this.Rows[index]));
                }
            }
            
            public event PlotChangeEventHandler PlotChanged;
            
            public event PlotChangeEventHandler PlotChanging;
            
            public event PlotChangeEventHandler PlotDeleted;
            
            public event PlotChangeEventHandler PlotDeleting;
            
            public void AddPlot(Plot row) {
                this.Rows.Add(row);
            }
            
            public Plot AddPlot(string XLabel, string YLabel, string XScale, string YScale, string XUnit, string YUnit, Result parentResultByResultPlot, int Width, int Height, string X) {
                Plot rowPlot = ((Plot)(this.NewRow()));
                rowPlot.ItemArray = new object[] {
                        XLabel,
                        YLabel,
                        XScale,
                        YScale,
                        XUnit,
                        YUnit,
                        parentResultByResultPlot[2],
                        null,
                        Width,
                        Height,
                        X};
                this.Rows.Add(rowPlot);
                return rowPlot;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PlotsDataTable cln = ((PlotsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PlotsDataTable();
            }
            
            internal void InitVars() {
                this.columnXLabel = this.Columns["XLabel"];
                this.columnYLabel = this.Columns["YLabel"];
                this.columnXScale = this.Columns["XScale"];
                this.columnYScale = this.Columns["YScale"];
                this.columnXUnit = this.Columns["XUnit"];
                this.columnYUnit = this.Columns["YUnit"];
                this.columnRID = this.Columns["RID"];
                this.columnPID = this.Columns["PID"];
                this.columnWidth = this.Columns["Width"];
                this.columnHeight = this.Columns["Height"];
                this.columnX = this.Columns["X"];
            }
            
            private void InitClass() {
                this.columnXLabel = new DataColumn("XLabel", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnXLabel);
                this.columnYLabel = new DataColumn("YLabel", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnYLabel);
                this.columnXScale = new DataColumn("XScale", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnXScale);
                this.columnYScale = new DataColumn("YScale", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnYScale);
                this.columnXUnit = new DataColumn("XUnit", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnXUnit);
                this.columnYUnit = new DataColumn("YUnit", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnYUnit);
                this.columnRID = new DataColumn("RID", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRID);
                this.columnPID = new DataColumn("PID", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPID);
                this.columnWidth = new DataColumn("Width", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnWidth);
                this.columnHeight = new DataColumn("Height", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnHeight);
                this.columnX = new DataColumn("X", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnX);
                this.Constraints.Add(new UniqueConstraint("NglXml1Key1", new DataColumn[] {
                                this.columnPID}, false));
                this.columnXLabel.Namespace = "http://ngl.fysel.ntnu.no/NglXml1.xsd";
                this.columnYLabel.Namespace = "http://ngl.fysel.ntnu.no/NglXml1.xsd";
                this.columnXScale.Namespace = "http://ngl.fysel.ntnu.no/NglXml1.xsd";
                this.columnYScale.Namespace = "http://ngl.fysel.ntnu.no/NglXml1.xsd";
                this.columnXUnit.Namespace = "http://ngl.fysel.ntnu.no/NglXml1.xsd";
                this.columnYUnit.Namespace = "http://ngl.fysel.ntnu.no/NglXml1.xsd";
                this.columnRID.Namespace = "http://ngl.fysel.ntnu.no/NglXml1.xsd";
                this.columnPID.AutoIncrement = true;
                this.columnPID.AllowDBNull = false;
                this.columnPID.Unique = true;
                this.columnPID.Namespace = "http://ngl.fysel.ntnu.no/NglXml1.xsd";
                this.columnWidth.Namespace = "http://ngl.fysel.ntnu.no/NglXml1.xsd";
                this.columnHeight.Namespace = "http://ngl.fysel.ntnu.no/NglXml1.xsd";
                this.columnX.AllowDBNull = false;
            }
            
            public Plot NewPlot() {
                return ((Plot)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Plot(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Plot);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PlotChanged != null)) {
                    this.PlotChanged(this, new PlotChangeEvent(((Plot)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PlotChanging != null)) {
                    this.PlotChanging(this, new PlotChangeEvent(((Plot)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PlotDeleted != null)) {
                    this.PlotDeleted(this, new PlotChangeEvent(((Plot)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PlotDeleting != null)) {
                    this.PlotDeleting(this, new PlotChangeEvent(((Plot)(e.Row)), e.Action));
                }
            }
            
            public void RemovePlot(Plot row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        internal class Plot : DataRow {
            
            private PlotsDataTable tablePlots;
            
            internal Plot(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePlots = ((PlotsDataTable)(this.Table));
            }
            
            public string XLabel {
                get {
                    try {
                        return ((string)(this[this.tablePlots.XLabelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlots.XLabelColumn] = value;
                }
            }
            
            public string YLabel {
                get {
                    try {
                        return ((string)(this[this.tablePlots.YLabelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlots.YLabelColumn] = value;
                }
            }
            
            public string XScale {
                get {
                    try {
                        return ((string)(this[this.tablePlots.XScaleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlots.XScaleColumn] = value;
                }
            }
            
            public string YScale {
                get {
                    try {
                        return ((string)(this[this.tablePlots.YScaleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlots.YScaleColumn] = value;
                }
            }
            
            public string XUnit {
                get {
                    try {
                        return ((string)(this[this.tablePlots.XUnitColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlots.XUnitColumn] = value;
                }
            }
            
            public string YUnit {
                get {
                    try {
                        return ((string)(this[this.tablePlots.YUnitColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlots.YUnitColumn] = value;
                }
            }
            
            public int RID {
                get {
                    try {
                        return ((int)(this[this.tablePlots.RIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlots.RIDColumn] = value;
                }
            }
            
            public int PID {
                get {
                    return ((int)(this[this.tablePlots.PIDColumn]));
                }
                set {
                    this[this.tablePlots.PIDColumn] = value;
                }
            }
            
            public int Width {
                get {
                    try {
                        return ((int)(this[this.tablePlots.WidthColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlots.WidthColumn] = value;
                }
            }
            
            public int Height {
                get {
                    try {
                        return ((int)(this[this.tablePlots.HeightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlots.HeightColumn] = value;
                }
            }
            
            public string X {
                get {
                    return ((string)(this[this.tablePlots.XColumn]));
                }
                set {
                    this[this.tablePlots.XColumn] = value;
                }
            }
            
            public Result Result {
                get {
                    return ((Result)(this.GetParentRow(this.Table.ParentRelations["ResultPlot"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ResultPlot"]);
                }
            }
            
            public bool IsXLabelNull() {
                return this.IsNull(this.tablePlots.XLabelColumn);
            }
            
            public void SetXLabelNull() {
                this[this.tablePlots.XLabelColumn] = System.Convert.DBNull;
            }
            
            public bool IsYLabelNull() {
                return this.IsNull(this.tablePlots.YLabelColumn);
            }
            
            public void SetYLabelNull() {
                this[this.tablePlots.YLabelColumn] = System.Convert.DBNull;
            }
            
            public bool IsXScaleNull() {
                return this.IsNull(this.tablePlots.XScaleColumn);
            }
            
            public void SetXScaleNull() {
                this[this.tablePlots.XScaleColumn] = System.Convert.DBNull;
            }
            
            public bool IsYScaleNull() {
                return this.IsNull(this.tablePlots.YScaleColumn);
            }
            
            public void SetYScaleNull() {
                this[this.tablePlots.YScaleColumn] = System.Convert.DBNull;
            }
            
            public bool IsXUnitNull() {
                return this.IsNull(this.tablePlots.XUnitColumn);
            }
            
            public void SetXUnitNull() {
                this[this.tablePlots.XUnitColumn] = System.Convert.DBNull;
            }
            
            public bool IsYUnitNull() {
                return this.IsNull(this.tablePlots.YUnitColumn);
            }
            
            public void SetYUnitNull() {
                this[this.tablePlots.YUnitColumn] = System.Convert.DBNull;
            }
            
            public bool IsRIDNull() {
                return this.IsNull(this.tablePlots.RIDColumn);
            }
            
            public void SetRIDNull() {
                this[this.tablePlots.RIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsWidthNull() {
                return this.IsNull(this.tablePlots.WidthColumn);
            }
            
            public void SetWidthNull() {
                this[this.tablePlots.WidthColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeightNull() {
                return this.IsNull(this.tablePlots.HeightColumn);
            }
            
            public void SetHeightNull() {
                this[this.tablePlots.HeightColumn] = System.Convert.DBNull;
            }
            
            public YVal[] GetYVals() {
                return ((YVal[])(this.GetChildRows(this.Table.ChildRelations["PlotYVals"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        internal class PlotChangeEvent : EventArgs {
            
            private Plot eventRow;
            
            private DataRowAction eventAction;
            
            public PlotChangeEvent(Plot row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Plot Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
